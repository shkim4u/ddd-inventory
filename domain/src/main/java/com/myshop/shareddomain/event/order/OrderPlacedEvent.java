/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.myshop.shareddomain.event.order;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OrderPlacedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5871720297136313374L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderPlacedEvent\",\"namespace\":\"com.myshop.shareddomain.event.order\",\"fields\":[{\"name\":\"number\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"orderer\",\"type\":{\"type\":\"record\",\"name\":\"Orderer\",\"fields\":[{\"name\":\"memberId\",\"type\":{\"type\":\"record\",\"name\":\"MemberId\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"orderLines\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OrderLine\",\"fields\":[{\"name\":\"productId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"price\",\"type\":\"int\"}]}}},{\"name\":\"orderDate\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<OrderPlacedEvent> ENCODER =
      new BinaryMessageEncoder<OrderPlacedEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrderPlacedEvent> DECODER =
      new BinaryMessageDecoder<OrderPlacedEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OrderPlacedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OrderPlacedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OrderPlacedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<OrderPlacedEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OrderPlacedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OrderPlacedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OrderPlacedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OrderPlacedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String number;
  private com.myshop.shareddomain.event.order.Orderer orderer;
  private java.util.List<com.myshop.shareddomain.event.order.OrderLine> orderLines;
  private java.time.Instant orderDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrderPlacedEvent() {}

  /**
   * All-args constructor.
   * @param number The new value for number
   * @param orderer The new value for orderer
   * @param orderLines The new value for orderLines
   * @param orderDate The new value for orderDate
   */
  public OrderPlacedEvent(java.lang.String number, com.myshop.shareddomain.event.order.Orderer orderer, java.util.List<com.myshop.shareddomain.event.order.OrderLine> orderLines, java.time.Instant orderDate) {
    this.number = number;
    this.orderer = orderer;
    this.orderLines = orderLines;
    this.orderDate = orderDate.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return number;
    case 1: return orderer;
    case 2: return orderLines;
    case 3: return orderDate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: number = value$ != null ? value$.toString() : null; break;
    case 1: orderer = (com.myshop.shareddomain.event.order.Orderer)value$; break;
    case 2: orderLines = (java.util.List<com.myshop.shareddomain.event.order.OrderLine>)value$; break;
    case 3: orderDate = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'number' field.
   * @return The value of the 'number' field.
   */
  public java.lang.String getNumber() {
    return number;
  }


  /**
   * Sets the value of the 'number' field.
   * @param value the value to set.
   */
  public void setNumber(java.lang.String value) {
    this.number = value;
  }

  /**
   * Gets the value of the 'orderer' field.
   * @return The value of the 'orderer' field.
   */
  public com.myshop.shareddomain.event.order.Orderer getOrderer() {
    return orderer;
  }


  /**
   * Sets the value of the 'orderer' field.
   * @param value the value to set.
   */
  public void setOrderer(com.myshop.shareddomain.event.order.Orderer value) {
    this.orderer = value;
  }

  /**
   * Gets the value of the 'orderLines' field.
   * @return The value of the 'orderLines' field.
   */
  public java.util.List<com.myshop.shareddomain.event.order.OrderLine> getOrderLines() {
    return orderLines;
  }


  /**
   * Sets the value of the 'orderLines' field.
   * @param value the value to set.
   */
  public void setOrderLines(java.util.List<com.myshop.shareddomain.event.order.OrderLine> value) {
    this.orderLines = value;
  }

  /**
   * Gets the value of the 'orderDate' field.
   * @return The value of the 'orderDate' field.
   */
  public java.time.Instant getOrderDate() {
    return orderDate;
  }


  /**
   * Sets the value of the 'orderDate' field.
   * @param value the value to set.
   */
  public void setOrderDate(java.time.Instant value) {
    this.orderDate = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new OrderPlacedEvent RecordBuilder.
   * @return A new OrderPlacedEvent RecordBuilder
   */
  public static com.myshop.shareddomain.event.order.OrderPlacedEvent.Builder newBuilder() {
    return new com.myshop.shareddomain.event.order.OrderPlacedEvent.Builder();
  }

  /**
   * Creates a new OrderPlacedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrderPlacedEvent RecordBuilder
   */
  public static com.myshop.shareddomain.event.order.OrderPlacedEvent.Builder newBuilder(com.myshop.shareddomain.event.order.OrderPlacedEvent.Builder other) {
    if (other == null) {
      return new com.myshop.shareddomain.event.order.OrderPlacedEvent.Builder();
    } else {
      return new com.myshop.shareddomain.event.order.OrderPlacedEvent.Builder(other);
    }
  }

  /**
   * Creates a new OrderPlacedEvent RecordBuilder by copying an existing OrderPlacedEvent instance.
   * @param other The existing instance to copy.
   * @return A new OrderPlacedEvent RecordBuilder
   */
  public static com.myshop.shareddomain.event.order.OrderPlacedEvent.Builder newBuilder(com.myshop.shareddomain.event.order.OrderPlacedEvent other) {
    if (other == null) {
      return new com.myshop.shareddomain.event.order.OrderPlacedEvent.Builder();
    } else {
      return new com.myshop.shareddomain.event.order.OrderPlacedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for OrderPlacedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderPlacedEvent>
    implements org.apache.avro.data.RecordBuilder<OrderPlacedEvent> {

    private java.lang.String number;
    private com.myshop.shareddomain.event.order.Orderer orderer;
    private com.myshop.shareddomain.event.order.Orderer.Builder ordererBuilder;
    private java.util.List<com.myshop.shareddomain.event.order.OrderLine> orderLines;
    private java.time.Instant orderDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.myshop.shareddomain.event.order.OrderPlacedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.number)) {
        this.number = data().deepCopy(fields()[0].schema(), other.number);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.orderer)) {
        this.orderer = data().deepCopy(fields()[1].schema(), other.orderer);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasOrdererBuilder()) {
        this.ordererBuilder = com.myshop.shareddomain.event.order.Orderer.newBuilder(other.getOrdererBuilder());
      }
      if (isValidValue(fields()[2], other.orderLines)) {
        this.orderLines = data().deepCopy(fields()[2].schema(), other.orderLines);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.orderDate)) {
        this.orderDate = data().deepCopy(fields()[3].schema(), other.orderDate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing OrderPlacedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.myshop.shareddomain.event.order.OrderPlacedEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.number)) {
        this.number = data().deepCopy(fields()[0].schema(), other.number);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orderer)) {
        this.orderer = data().deepCopy(fields()[1].schema(), other.orderer);
        fieldSetFlags()[1] = true;
      }
      this.ordererBuilder = null;
      if (isValidValue(fields()[2], other.orderLines)) {
        this.orderLines = data().deepCopy(fields()[2].schema(), other.orderLines);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.orderDate)) {
        this.orderDate = data().deepCopy(fields()[3].schema(), other.orderDate);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'number' field.
      * @return The value.
      */
    public java.lang.String getNumber() {
      return number;
    }


    /**
      * Sets the value of the 'number' field.
      * @param value The value of 'number'.
      * @return This builder.
      */
    public com.myshop.shareddomain.event.order.OrderPlacedEvent.Builder setNumber(java.lang.String value) {
      validate(fields()[0], value);
      this.number = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'number' field has been set.
      * @return True if the 'number' field has been set, false otherwise.
      */
    public boolean hasNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'number' field.
      * @return This builder.
      */
    public com.myshop.shareddomain.event.order.OrderPlacedEvent.Builder clearNumber() {
      number = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderer' field.
      * @return The value.
      */
    public com.myshop.shareddomain.event.order.Orderer getOrderer() {
      return orderer;
    }


    /**
      * Sets the value of the 'orderer' field.
      * @param value The value of 'orderer'.
      * @return This builder.
      */
    public com.myshop.shareddomain.event.order.OrderPlacedEvent.Builder setOrderer(com.myshop.shareddomain.event.order.Orderer value) {
      validate(fields()[1], value);
      this.ordererBuilder = null;
      this.orderer = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'orderer' field has been set.
      * @return True if the 'orderer' field has been set, false otherwise.
      */
    public boolean hasOrderer() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'orderer' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.myshop.shareddomain.event.order.Orderer.Builder getOrdererBuilder() {
      if (ordererBuilder == null) {
        if (hasOrderer()) {
          setOrdererBuilder(com.myshop.shareddomain.event.order.Orderer.newBuilder(orderer));
        } else {
          setOrdererBuilder(com.myshop.shareddomain.event.order.Orderer.newBuilder());
        }
      }
      return ordererBuilder;
    }

    /**
     * Sets the Builder instance for the 'orderer' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.myshop.shareddomain.event.order.OrderPlacedEvent.Builder setOrdererBuilder(com.myshop.shareddomain.event.order.Orderer.Builder value) {
      clearOrderer();
      ordererBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'orderer' field has an active Builder instance
     * @return True if the 'orderer' field has an active Builder instance
     */
    public boolean hasOrdererBuilder() {
      return ordererBuilder != null;
    }

    /**
      * Clears the value of the 'orderer' field.
      * @return This builder.
      */
    public com.myshop.shareddomain.event.order.OrderPlacedEvent.Builder clearOrderer() {
      orderer = null;
      ordererBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderLines' field.
      * @return The value.
      */
    public java.util.List<com.myshop.shareddomain.event.order.OrderLine> getOrderLines() {
      return orderLines;
    }


    /**
      * Sets the value of the 'orderLines' field.
      * @param value The value of 'orderLines'.
      * @return This builder.
      */
    public com.myshop.shareddomain.event.order.OrderPlacedEvent.Builder setOrderLines(java.util.List<com.myshop.shareddomain.event.order.OrderLine> value) {
      validate(fields()[2], value);
      this.orderLines = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'orderLines' field has been set.
      * @return True if the 'orderLines' field has been set, false otherwise.
      */
    public boolean hasOrderLines() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'orderLines' field.
      * @return This builder.
      */
    public com.myshop.shareddomain.event.order.OrderPlacedEvent.Builder clearOrderLines() {
      orderLines = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderDate' field.
      * @return The value.
      */
    public java.time.Instant getOrderDate() {
      return orderDate;
    }


    /**
      * Sets the value of the 'orderDate' field.
      * @param value The value of 'orderDate'.
      * @return This builder.
      */
    public com.myshop.shareddomain.event.order.OrderPlacedEvent.Builder setOrderDate(java.time.Instant value) {
      validate(fields()[3], value);
      this.orderDate = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'orderDate' field has been set.
      * @return True if the 'orderDate' field has been set, false otherwise.
      */
    public boolean hasOrderDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'orderDate' field.
      * @return This builder.
      */
    public com.myshop.shareddomain.event.order.OrderPlacedEvent.Builder clearOrderDate() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OrderPlacedEvent build() {
      try {
        OrderPlacedEvent record = new OrderPlacedEvent();
        record.number = fieldSetFlags()[0] ? this.number : (java.lang.String) defaultValue(fields()[0]);
        if (ordererBuilder != null) {
          try {
            record.orderer = this.ordererBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("orderer"));
            throw e;
          }
        } else {
          record.orderer = fieldSetFlags()[1] ? this.orderer : (com.myshop.shareddomain.event.order.Orderer) defaultValue(fields()[1]);
        }
        record.orderLines = fieldSetFlags()[2] ? this.orderLines : (java.util.List<com.myshop.shareddomain.event.order.OrderLine>) defaultValue(fields()[2]);
        record.orderDate = fieldSetFlags()[3] ? this.orderDate : (java.time.Instant) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrderPlacedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrderPlacedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrderPlacedEvent>
    READER$ = (org.apache.avro.io.DatumReader<OrderPlacedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










